<?php

/**
 * @file
 * Installation procedures for fcrl_workflow.
 */

/**
 * Implements hook_install().
 */
function fcrl_workflow_install() {
  fcrl_workflow_revert_views();
}

/**
 * Implements hook_enable().
 */
function fcrl_workflow_enable() {
  // Create new roles for workflow if don't exist.
  $roles = array(
    'Workflow Contributor',
    'Workflow Moderator',
    'Workflow Supervisor',
  );

  foreach ($roles as $role_name) {
    $existing_role = user_role_load_by_name($role_name);
    if (empty($existing_role)) {
      $role = new stdClass();
      $role->name = $role_name;
      user_role_save($role);
    }
  }

  // Enable fcrl_workflow_permissions if not already.
  if (!module_exists('fcrl_workflow_permissions')) {
    module_enable(array('fcrl_workflow_permissions'));
  }

  // Enable moderation for fcrl_workflow enabled content types upon install.
  // This config is kept persistant using the hook_strongarm_alter().
  // Default fcrl content types with moderation.
  $fcrl_workflow_content_types = array('dataset', 'resource', 'feedback');

  foreach ($fcrl_workflow_content_types as $type) {
    $var_name = 'node_options_' . $type;
    $node_options = variable_get($var_name, array());
    $node_options = (array_key_exists($var_name, $node_options) && is_array($node_options[$var_name]->value)) ?
      $node_options[$var_name]->value :
      $node_options;

    // Remove status if set;.
    $node_options = array_diff($node_options, array('status'));

    // Add moderation and revision if needed.
    $node_options = array_values(array_unique(array_merge($node_options, array('moderation', 'revision')), SORT_REGULAR));
    variable_set($var_name, $node_options);
  }
  fcrl_workflow_revert_views();

  variable_set('fcrl_workflow_content_types', $fcrl_workflow_content_types);

  // Revert fcrl sitewide menu to add links to command center.
  features_revert(array('fcrl_sitewide_menu' => array('menu_links')));

  fcrl_workflow_admin_menu_source();

  // Add fcrl workflow roles to roleassign config.
  $roleassign_roles = variable_get('roleassign_roles', array());
  $roles_rids = array_flip(user_roles());

  $add_roles = array(
    'Workflow Contributor',
    'Workflow Moderator',
    'Workflow Supervisor',
  );

  foreach ($add_roles as $role) {
    if (isset($roles_rids[$role])) {
      $roleassign_roles[$roles_rids[$role]] = (string) $roles_rids[$role];
    }
  }
  variable_set('roleassign_roles', $roleassign_roles);

}

/**
 * Helper function.
 *
 * This sets up the admin_menu_source module's configuration.
 * We want the content creator and editor roles to have the "command center"
 * menu rather than the whole admin menu in the top bar. We can't rely on the
 * rid to be the same on every site so not using features.
 */
function fcrl_workflow_admin_menu_source() {
  drupal_flush_all_caches();
  $roles = array_flip(user_roles());

  $admin_menu_source_settings = array(
    $roles['Workflow Contributor'] => array(
      'rid' => $roles['Workflow Contributor'],
      'source' => 'menu-command-center-menu',
      'weight' => 4,
    ),
    $roles['Workflow Moderator'] => array(
      'rid' => $roles['Workflow Moderator'],
      'source' => 'menu-command-center-menu',
      'weight' => 5,
    ),
    $roles['Workflow Supervisor'] => array(
      'rid' => $roles['Workflow Supervisor'],
      'source' => 'menu-command-center-menu',
      'weight' => 6,
    ),
  );
  $previous_settings = variable_get('admin_menu_source_settings');
  $admin_menu_source_settings = array_replace($previous_settings, $admin_menu_source_settings);
  variable_set('admin_menu_source_settings', $admin_menu_source_settings);
}

/**
 * Implements hook_disable().
 */
function fcrl_workflow_disable() {
  // Remove workflow roles from roleassign_roles variable.
  $roleassign_roles = variable_get('roleassign_roles', array());
  $roles_rids = array_flip(user_roles());
  $remove_roles = array(
    'Workflow Contributor',
    'Workflow Moderator',
    'Workflow Supervisor',
  );

  foreach ($remove_roles as $role) {
    unset($roleassign_roles[$roles_rids[$role]]);
  }

  variable_set('roleassign_roles', $roleassign_roles);
}
