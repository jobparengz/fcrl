<?php

/**
 * @file
 * Enables database csv imports.
 */

define('FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_BATCH_IMPORT', 0);
define('FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_FAST_IMPORT', 1);
define('FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_DYNAMIC_IMPORT', 2);

/**
 * Implements hook_menu().
 */
function fcrl_datastore_fast_import_menu() {
  $items['admin/fcrl/datastore'] = array(
    'title' => 'FCRL Datastore',
    'description' => 'Settings for FCRL Datastore.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fcrl_datastore_fast_import_settings'),
    'access arguments' => array('manage datastore settings'),
  );

  return $items;
}

/**
 * Check database is set with pdo flags.
 */
function fcrl_datastore_check_database() {
  global $databases;
  $target = Database::getConnection()->getTarget();
  $key = Database::getConnection()->getKey();
  $database = $databases[$target][$key];

  if (!isset($database['pdo'])) {
    drupal_set_message(t('Required PDO flags for fcrl_datastore_fast_import were not found. This module requires PDO::MYSQL_ATTR_LOCAL_INFILE and PDO::MYSQL_ATTR_USE_BUFFERED_QUERY'), 'error', FALSE);
  }
  else {

    $infile_enabled = array_key_exists(PDO::MYSQL_ATTR_LOCAL_INFILE, $database['pdo']) && $database['pdo'][PDO::MYSQL_ATTR_LOCAL_INFILE];
    if (!$infile_enabled) {
      drupal_set_message(t('Required PDO flag for fcrl_datastore_fast_import were not found. This module requires PDO::MYSQL_ATTR_LOCAL_INFILE'), 'error', FALSE);
    }

    $buffered_query_enabled = array_key_exists(PDO::MYSQL_ATTR_USE_BUFFERED_QUERY, $database['pdo']) && $database['pdo'][PDO::MYSQL_ATTR_USE_BUFFERED_QUERY];
    if (!$buffered_query_enabled) {
      drupal_set_message(t('Required PDO flag for fcrl_datastore_fast_import were not found. This module requires PDO::MYSQL_ATTR_USE_BUFFERED_QUERY'), 'error', FALSE);
    }

  }
}

/**
 * Settings form.
 */
function fcrl_datastore_fast_import_settings() {
  fcrl_datastore_check_database();
  $form = array();
  $options = array(
    FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_BATCH_IMPORT => t('Use regular import as default (BATCH)'),
    FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_FAST_IMPORT => t('Use fast import as default (LOAD DATA)'),
    FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_DYNAMIC_IMPORT => t('Use fast import for files with a weight over:'),
  );

  $form['fcrl_datastore_fast_import_selection'] = array(
    '#type' => 'radios',
    '#title' => t('Fast Import Selection'),
    '#options' => $options,
    '#default_value' => variable_get('fcrl_datastore_fast_import_selection', 0),
  );

  $form['fcrl_datastore_fast_import_selection_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('File size threshold'),
    '#size' => 50,
    '#default_value' => variable_get('fcrl_datastore_fast_import_selection_threshold', FcrlDatastoreFastImport::FAST_IMPORT_THRESHOLD_DEFAULT),
    '#description' => '',
    '#states' => array(
      'visible' => array(
        ':input[name="fcrl_datastore_fast_import_selection"]' => array('value' => FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_DYNAMIC_IMPORT),
      ),
    ),
  );

  $options = array(
    'load_data_local_infile' => t('LOAD DATA LOCAL INFILE'),
    'load_data_infile' => t('LOAD DATA INFILE'),
  );
  $form['fcrl_datastore_load_data_type'] = array(
    '#type' => 'radios',
    '#title' => t('Load Data Statement'),
    '#options' => $options,
    '#description' => t('Choose the version of load data you want to use. This depends on your hosting configuration.'),
    '#default_value' => variable_get('fcrl_datastore_load_data_type', 'load_data_local_infile'),
    '#states' => array(
      'invisible' => array(
        ':input[name="fcrl_datastore_fast_import_selection"]' => array('value' => FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_BATCH_IMPORT),
      ),
    ),
  );

  $form['queue_filesize_threshold'] = array(
    '#type' => 'textfield',
    '#title' => t('Queue Filesize Threshold'),
    '#size' => 50,
    '#default_value' => variable_get('queue_filesize_threshold', FcrlDatastoreFastImport::QUEUE_FILESIZE_THRESHOLD_DEFAULT),
    '#description' => 'You need to setup a cron to run periodically "drush queue-run fcrl_datastore_queue". If not, files will not be imported into the datastore.',
    '#states' => array(
      'invisible' => array(
        ':input[name="fcrl_datastore_fast_import_selection"]' => array('value' => FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_BATCH_IMPORT),
      ),
    ),
  );
  $form['#submit'][] = 'fcrl_datastore_fast_import_settings_submit';

  return system_settings_form($form);
}

/**
 * Settings submit callback.
 */
function fcrl_datastore_fast_import_settings_submit($form, &$form_state) {
  $fast_import_selection = $form_state['values']['fcrl_datastore_fast_import_selection'];
  $class = ($fast_import_selection != FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_BATCH_IMPORT) ? 'FcrlDatastoreFastImport' : 'FcrlDatastore';
  variable_set('fcrl_datastore_class', $class);
}

/**
 * Get the datastore queue name.
 */
function fcrl_datastore_fast_import_queue_name() {
  return 'fcrl_datastore_fast_import_queue';
}

/**
 * Implements hook_cron_queue_info().
 */
function fcrl_datastore_fast_import_cron_queue_info() {
  return array(
    fcrl_datastore_fast_import_queue_name() => array(
      'worker callback' => 'fcrl_datastore_fast_import_import_queue_worker',
      'skip on cron' => TRUE,
      'time' => 600,
    ),
  );
}

/**
 * Import csv using the most performant way.
 */
function fcrl_datastore_fast_import_import($source, $node, $table, $config) {
  $load_data_type = variable_get('fcrl_datastore_load_data_type', 'load_data_local_infile');
  $file = $node->field_upload->value();
  $file_path = drupal_realpath($file->uri);
  $feeds_entity_id = $source->feed_nid;
  $headers = array_keys($table->meta['fields']);
  $fields = implode(',', $headers);
  $delim = $config['delimiter'];
  $has_headers = ($config['no_headers']) ? '' : 'IGNORE 1 LINES';
  $quote_delimiters = variable_get('quote_delimiters', '"');
  $lines_terminated_by = variable_get('lines_terminated_by', '\n');
  $fields_escaped_by = variable_get('fields_escaped_by', '');
  $empty_as_null = variable_get('fcrl_datastore_fast_import_load_empty_cells_as_null', 0);
  $set_null_values = '';
  $params = array();

  // If importing empty values as null, create a local var for each column.
  // See https://stackoverflow.com/questions/2675323/mysql-load-null-values-from-csv-data
  if ($empty_as_null) {
    $vars = fcrl_datastore_fast_import_get_fields_as_vars($headers);
    $fields = implode(',', $vars);
    $headers_to_vars = array_combine($headers, $vars);
    foreach ($headers_to_vars as $header => $var) {
      $set_null_values = $set_null_values . ", $header = nullif($var,'')";
    }
  }

  $load_data_statement = ($load_data_type === 'load_data_local_infile') ? 'LOAD DATA LOCAL' : 'LOAD DATA';

  $sql = "$load_data_statement INFILE :file_path IGNORE
      INTO TABLE {$table->name}
      FIELDS TERMINATED BY :delim
      ENCLOSED BY :quote_delimiters";
  $params[':file_path'] = $file_path;
  $params[':delim'] = $delim;
  $params[':quote_delimiters'] = $quote_delimiters;

  if ($fields_escaped_by) {
    $sql = $sql . "  ESCAPED BY :fields_escaped_by";
    $params[':fields_escaped_by'] = $fields_escaped_by;
  }
  $sql = $sql . " LINES TERMINATED BY '$lines_terminated_by' $has_headers ($fields)
    SET timestamp=UNIX_TIMESTAMP(), feeds_entity_id=$feeds_entity_id $set_null_values;";

  try {
    $result = db_query($sql, $params);
    if ($result) {
      if ($result->rowCount() == 0) {
        drupal_set_message(t('There were no items imported. It may be due to a misconfiguration related to characters set as quote delimiters, lines terminators or escape characters.'), 'warning', FALSE);
      }
    }
    $node->field_datastore_status->set(FCRL_DATASTORE_EXISTS);
    $node->save();
    return array('total_imported_items' => $result->rowCount());
  }
  catch (Exception $e) {
    drupal_set_message(t('There was an error trying to import this file: @error', array('@error' => $e->getMessage())), 'error', FALSE);
    return array('error', $e);
  }
}

/**
 * Get header names as sql variables.
 */
function fcrl_datastore_fast_import_get_fields_as_vars($headers) {
  $vars = array();
  foreach ($headers as $header) {
    $vars[] = '@v' . $header;
  }
  return $vars;
}

/**
 * Queue worker for fcrl fast imports.
 */
function fcrl_datastore_fast_import_import_queue_worker($item) {
  fcrl_datastore_fast_import_import($item['source'], $item['node'], $item['table'], $item['config']);
}

/**
 * Implements hook_form_alter().
 */
function fcrl_datastore_fast_import_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'fcrl_datastore_import_tab_form') {
    $node = entity_metadata_wrapper('node', $form_state['build_info']['args'][0]);
    $file = $node->field_upload->value();
    $selection = variable_get('fcrl_datastore_fast_import_selection', FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_BATCH_IMPORT);
    $use_fast_import = FALSE;
    variable_set('quote_delimiters', '"');
    variable_set('lines_terminated_by', '\n');
    variable_set('fields_escaped_by', '');
    variable_set('fcrl_datastore_fast_import_load_empty_cells_as_null', 0);

    if ($selection == FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_DYNAMIC_IMPORT) {
      $threshold = variable_get('fcrl_datastore_fast_import_selection_threshold', FcrlDatastoreFastImport::FAST_IMPORT_THRESHOLD_DEFAULT);
      if ($file->filesize > parse_size($threshold)) {
        $use_fast_import = TRUE;
      }
    }
    elseif ($selection == FCRL_DATASTORE_FAST_IMPORT_FCRL_DATASTORE_FAST_IMPORT) {
      $use_fast_import = TRUE;
    }
    else {
      $use_fast_import = FALSE;
    }

    $form['use_fast_import'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Fast Import'),
      '#default_value' => $use_fast_import,
      '#states' => array(
        'disabled' => array(
          ':input[name="FeedsFlatstoreProcessor[geolocate]"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['#attached']['js'][] = array(
      'data' => drupal_get_path('module', 'fcrl_datastore_fast_import') . '/fcrl_datastore_fast_import.js',
      'type' => 'file',
    );
    $form['quote_delimiters'] = array(
      '#type' => 'select',
      '#title' => t('Quote delimiters'),
      '#options' => array(
        '\'' => '\'',
        '"' => '"',
        '~' => '~',
      ),
      '#default_value' => variable_get('quote_delimiters', '"'),
      '#description' => t('The character that will be used to enclose fields in this CSV file.'),
      '#states' => array(
        'invisible' => array(
          ':input[name="use_fast_import"]' => array('checked' => FALSE),
        ),
      ),
    );
    $form['lines_terminated_by'] = array(
      '#type' => 'select',
      '#title' => t('Lines terminated by:'),
      '#options' => array(
        '\n' => '\n (Unix)',
        '\r\n' => '\r\n (Windows)',
        '\r' => '\r (Legacy Mac)',
      ),
      '#default_value' => variable_get('lines_terminated_by', '\n'),
      '#states' => array(
        'invisible' => array(
          ':input[name="use_fast_import"]' => array('checked' => FALSE),
        ),
      ),
    );
    $form['fields_escaped_by'] = array(
      '#type' => 'textfield',
      '#title' => t('Fields escaped by:'),
      '#default_value' => variable_get('fields_escaped_by', ''),
      '#description' => t('The character used to escape other characters on each fields. Leave empty if it isn\'t needed.'),
      '#states' => array(
        'invisible' => array(
          ':input[name="use_fast_import"]' => array('checked' => FALSE),
        ),
      ),
    );
    $form['fcrl_datastore_fast_import_load_empty_cells_as_null'] = array(
      '#type' => 'checkbox',
      '#title' => t('Read empty cells as NULL (if unchecked, empty cells will be read as zeros or empty strings).'),
      '#default_value' => variable_get('fcrl_datastore_fast_import_load_empty_cells_as_null'),
      '#states' => array(
        'invisible' => array(
          ':input[name="use_fast_import"]' => array('checked' => FALSE),
        ),
      ),
    );
  }
}
